{"version":3,"sources":["Instructions/Instructions.js","ValidationComponent/ValidationComponent.js","CharComponent/CharComponent.js","App.js","serviceWorker.js","index.js"],"names":["instructions","validationComponent","props","text","length","charComponent","letter","clicked","style","display","padding","textAlign","margin","border","onClick","App","state","changedTextHandler","event","setState","target","value","removeLetterHandler","index","array","split","splice","join","letters","this","map","a","CharComponent","bind","key","className","Instructions","type","onChange","ValidationComponent","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAqBeA,G,MAnBM,WAEjB,OACI,6BACI,4CACA,4BACI,4KACA,wHACA,mLACA,+MACA,gLACA,4GAEJ,+FACA,gCCJGC,EAVa,SAACC,GAEzB,IAAMC,EAAQD,EAAME,OAAS,EAAK,oBAAqB,kBAEvD,OACI,wDAA8BD,ICYvBE,EAjBO,SAACH,GAAW,IAAD,EAEJ,CAACA,EAAMI,OAAOJ,EAAMK,SAAtCD,EAFsB,KAEfC,EAFe,KAW7B,OACA,yBAAKC,MATS,CACVC,QAAS,eACTC,QAAS,OACTC,UAAW,SACXC,OAAQ,OACRC,OAAQ,mBAIOC,QAASP,GAAUD,ICiC3BS,E,2MAvCbC,MAAQ,CAACb,KAAM,I,EAEfc,mBAAqB,SAACC,GACpB,EAAKC,SAAS,CAAChB,KAAMe,EAAME,OAAOC,S,EAGpCC,oBAAsB,SAACC,GACrB,IAAMC,EAAQ,EAAKR,MAAMb,KAAKsB,MAAM,IACpCD,EAAME,OAAOH,EAAM,GACnB,IAAMpB,EAAOqB,EAAMG,KAAK,IACxB,EAAKR,SAAS,CAAChB,U,wEAGR,IAAD,OAEAyB,EACHC,KAAKb,MAAMb,KAAKsB,MAAM,IAAIK,KAAI,SAACC,EAAER,GAC/B,OAAS,kBAACS,EAAD,CACEzB,QAAS,EAAKe,oBAAoBW,KAAK,EAAKV,GAC5CjB,OAAQyB,EACRG,IAAKX,OAIrB,OACE,yBAAKY,UAAU,OACb,kBAACC,EAAD,MACA,2BAAOC,KAAK,OACLhB,MAAOQ,KAAKb,MAAMb,KAClBmC,SAAUT,KAAKZ,qBACtB,wCAAcY,KAAKb,MAAMb,KAAKC,OAA9B,gBACA,kBAACmC,EAAD,CAAqBnC,OAAQyB,KAAKb,MAAMb,KAAKC,SAC5CwB,O,GAlCSY,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e0a19a0f.chunk.js","sourcesContent":["import React from 'react';\n\nconst instructions = () => {\n\n    return (\n        <div>\n            <h1>Instructions</h1>\n            <ol>\n                <li>Create an input field (in App component) with a change listener which outputs the length of the entered text below it (e.g. in a paragraph).</li>\n                <li>Create a new component (=> ValidationComponent) which receives the text length as a prop</li>\n                <li>Inside the ValidationComponent, either output \"Text too short\" or \"Text long enough\" depending on the text length (e.g. take 5 as a minimum length)</li>\n                <li>Create another component (=> CharComponent) and style it as an inline box (=> display: inline-block, padding: 16px, text-align: center, margin: 16px, border: 1px solid black).</li>\n                <li>Render a list of CharComponents where each CharComponent receives a different letter of the entered text (in the initial input field) as a prop.</li>\n                <li>When you click a CharComponent, it should be removed from the entered text.</li>\n            </ol>\n            <p>Hint: Keep in mind that JavaScript strings are basically arrays!</p>\n            <hr/>    \n        </div>\n    )\n};\n\nexport default instructions; ","import React  from 'react';\n\nconst validationComponent = (props) => {\n\n    const text = (props.length > 5) ? 'Text long enough!': 'Text too short!' ;\n\n    return(\n        <div>Result of validations:  {text}</div> \n    )\n\n};\n\nexport default validationComponent;","import React from 'react';\n\nconst charComponent = (props) => {\n\n    const [letter,clicked] = [props.letter,props.clicked]; \n    const style = {\n        display: 'inline-block', \n        padding: '16px', \n        textAlign: 'center', \n        margin: '16px', \n        border: '1px solid black'\n    }\n    \n    return(\n    <div style={style} onClick={clicked}>{letter}</div>\n    )\n\n};\n\nexport default charComponent;","import React, {Component} from 'react';\nimport './App.css';\nimport Instructions from './Instructions/Instructions';\nimport ValidationComponent from './ValidationComponent/ValidationComponent';\nimport CharComponent from './CharComponent/CharComponent';\n\nclass App extends Component {\n  \n  state = {text: ''}\n\n  changedTextHandler = (event) => {\n    this.setState({text: event.target.value });\n  };\n\n  removeLetterHandler = (index) => {\n    const array = this.state.text.split(\"\");\n    array.splice(index,1);\n    const text = array.join(\"\");\n    this.setState({text}); \n  }\n\n  render(){\n\n    const letters = (\n       this.state.text.split(\"\").map((a,index) =>{\n         return ( <CharComponent \n                    clicked={this.removeLetterHandler.bind(this,index)} \n                    letter={a} \n                    key={index} />) \n       }) \n    );\n\n    return (\n      <div className=\"App\">\n        <Instructions/>\n        <input type='text' \n               value={this.state.text} \n               onChange={this.changedTextHandler} />\n        <p>You typed {this.state.text.length} characters!</p>\n        <ValidationComponent length={this.state.text.length}/>  \n        {letters}\n      </div>\n    );\n  }\n  \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}